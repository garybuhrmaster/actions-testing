---
name: Build MythTV

on:
  workflow_run:
    workflows: ["Run ansible-playbook"]
    types:
      - completed

permissions:
  contents: read

jobs:
  #
  # For MythTV plugin configuration results it is necessary
  # to have first compiled the core, and installed it.  This
  # is unfortunate due to the resources needed to compile
  # the core, but it is the way MythTV is currently designed.
  # There is no requirement to make or install the plugins,
  # but it might produce some other error that indicates an
  # issue.
  #
  # Note that in theory we should use github cache for ccache
  # in order to (substantially) improve build time, but as
  # github limits the total size of cache files to 10GB,
  # and for MythTV ccache to be useful it needs to be rather
  # large, and we are building a lot of variants, the github
  # cache ends up being too small to be helpful, so we do
  # not use it for this workflow.
  #
  # We test both the master and the current fixes branches,
  # as there can be divergence in their requirements.
  #
  # Compiling with clang is commented out for now, although
  # it may be an interesting addition for better coverage.
  #
  build-mythtv-linux:
    name: Building ${{ matrix.branch.desc }} on ${{ matrix.container.desc }} with ${{ matrix.compiler.desc }} 

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC
      MYTHTV_CONFIG_PREFIX: ${{ github.workspace }}/build/install
      MYTHTV_CONFIG_EXTRA:

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)',       ansibleopts: '--limit localhost' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)',   ansibleopts: '--limit localhost' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 (Kinetic Kudu)',          ansibleopts: '--limit localhost' }

          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)',                 ansibleopts: '--limit localhost' }
          - { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)',                 ansibleopts: '--limit localhost' }

          - { image: 'fedora:35',                      desc: 'Fedora 35',                            ansibleopts: '--limit localhost' }
          - { image: 'fedora:36',                      desc: 'Fedora 36',                            ansibleopts: '--limit localhost' }
          - { image: 'fedora:37',                      desc: 'Fedora 37',                            ansibleopts: '--limit localhost' }
          - { image: 'fedora:rawhide',                 desc: 'Fedora Rawhide',                       ansibleopts: '--limit localhost' }

          - { image: 'quay.io/centos/centos:stream8',  desc: 'CentOS 8 Stream',                      ansibleopts: '--limit localhost' }
          - { image: 'quay.io/centos/centos:stream9',  desc: 'CentOS 9 Stream',                      ansibleopts: '--limit localhost' }
          
          - { image: 'rockylinux:8',                   desc: 'Rocky Linux 8',                        ansibleopts: '--limit localhost' }
          - { image: 'rockylinux:9',                   desc: 'Rocky Linux 9',                        ansibleopts: '--limit localhost' }

          - { image: 'opensuse/tumbleweed:latest',     desc: 'openSUSE Tumbleweed',                  ansibleopts: '--limit localhost' }
          - { image: 'opensuse/leap:latest',           desc: 'openSUSE Leap',                        ansibleopts: '--limit localhost' }

          - { image: 'archlinux:latest',               desc: 'Arch Linux',                           ansibleopts: '--limit localhost' }

        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc',                                  compileropts: '--cc=gcc --cxx=g++' }
          - { cc: 'clang', cxx: 'clang++',             desc: 'clang',                                compileropts: '--cc=clang --cxx=clang++' }

        branch:
          - { ref: 'master',                           desc: 'MythTV master',                        branchopts: '' }
          - { ref: 'fixes/32',                         desc: 'MythTV fixes/32',                      branchopts: '' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ansible apt-utils -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux (for ansible)
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS install ansible and compilers
        run: dnf install ansible dnf-plugins-core gcc gcc-c++ clang -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: OpenSUSE OS update
        run: zypper update -y
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: OpenSUSE OS install ansible and compilers
        run: zypper install -y ansible tar gzip gcc gcc-c++ clang
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: ArchLinux OS update
        run: pacman --noconfirm -Syu
        if: env.OS_RELEASE_ID == 'arch'

      - name: ArchLinux OS install ansible and compilers
        run: pacman --noconfirm -Sy ansible gcc clang
        if: env.OS_RELEASE_ID == 'arch'
      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook ${{ matrix.container.ansibleopts }} mythtv.yml

      - name: Debian/Ubuntu OS install clang if requested
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ${{ matrix.compiler.cc }} -y
        if: ( env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu' ) && matrix.compiler.cc == 'clang'

      - name: Redhat/Fedora OS install clang if requested
        run: dnf install ${{ matrix.compiler.cc }} -y
        if: ( env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky' ) && matrix.compiler.cc == 'clang'

      - name: OpenSUSE OS install clang if requested
        run: zypper install -y ${{ matrix.compiler.cc }}
        if: ( env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed' ) && matrix.compiler.cc == 'clang'

      - name: ArchLinux OS install clang if requested
        run: pacman --noconfirm -Sy ${{ matrix.compiler.cc }}
        if: env.OS_RELEASE_ID == 'arch' && matrix.compiler.cc == 'clang'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv
          ref: ${{ matrix.branch.ref }}
          path: mythtv

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }} ${{ env.MYTHTV_CONFIG_EXTRA }} ${{ matrix.compiler.compileropts }} ${{ matrix.branch.branchopts }}

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }}

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install

  build-mythtv-macOS:
    name: Building ${{ matrix.branch.desc }} on ${{ matrix.macOS.desc }} using ${{ matrix.pkg-mgr.desc }} with ${{ matrix.compiler.desc }}

    env:
      MACPORTS_VERSION: 2.7.2
      TZ: Etc/UTC
      MYTHTV_CONFIG_PREFIX: ${{ github.workspace }}/build/install
      MYTHTV_CONFIG_EXTRA:

    strategy:
      matrix:
        macOS:
          - { os: 'macos-11',                          desc: 'macOS 11 (Big Sur)',                   portspkg: '11-BigSur'}
          - { os: 'macos-12',                          desc: 'macOS 12 (Monterey)',                  portspkg: '12-Monterey' }

        pkg-mgr:
          - { mgr: 'macports',                         desc: 'macports' }
          ## Homebrew ansible tasks are still a work in progress
          # { mgr: 'homebrew',                         desc: 'homebrew' }

        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc',                                  compileropts: '--cc=gcc --cxx=g++' }
          - { cc: 'clang', cxx: 'clang++',             desc: 'clang',                                compileropts: '--cc=clang --cxx=clang++' }

        branch:
          - { ref: 'master',                           desc: 'MythTV master',                        branchopts: '' }
          - { ref: 'fixes/32',                         desc: 'MythTV fixes/32',                      branchopts: '' }

      fail-fast: false

    runs-on: ${{ matrix.macOS.os }}

    steps:
      - name: Uninstall homebrew if using macports (package conflicts)
        run: /bin/bash -c "$(NONINTERACTIVE=1 curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install macports if using macports
        run: |
          curl --location https://github.com/macports/macports-base/releases/download/v${{ env.MACPORTS_VERSION }}/MacPorts-${{ env.MACPORTS_VERSION }}-${{ matrix.macOS.portspkg }}.pkg --output MacPorts.pkg
          sudo installer -pkg ./MacPorts.pkg -target /
          echo "PATH=/opt/local/bin:/opt/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Adjust path for homebrew
        run: echo "PATH=/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Install ansible for macports
        run: |
          sudo port install py310-ansible
          sudo port select --set ansible py310-ansible
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install ansible for homebrew
        run: brew install ansible
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          path: ansible

      - name: Run ansible to install build requirements for macports
        working-directory: ansible
        run: sudo ansible-playbook -i hosts qt5.yml --extra-vars "install_qtwebkit=true"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Run ansible to install build requirements for homebrew
        working-directory: ansible
        run: ansible-playbook -i hosts qt5.yml
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Add qt5 qmake path for macports
        run: echo "PATH=/opt/local/libexec/qt5/bin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Add extra flags for macports
        run: echo "MYTHTV_CONFIG_EXTRA=--extra-cxxflags='-I/opt/local/include' --extra-ldflags='-L/opt/local/lib' $MYTHTV_CONFIG_EXTRA" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Force qt5 for homebrew
        run: brew link qt5 --force
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Add extra flags for homebrew
        run: echo "MYTHTV_CONFIG_EXTRA=--extra-cxxflags='-I/usr/local/include' --extra-ldflags='-L/usr/local/lib' $MYTHTV_CONFIG_EXTRA" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv
          ref: ${{ matrix.branch.ref }}
          path: mythtv

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }} ${{ env.MYTHTV_CONFIG_EXTRA }} ${{ matrix.compiler.compileropts }} ${{ matrix.branch.branchopts }}

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ github.workspace }}/build/install

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install


