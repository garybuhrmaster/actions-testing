---
name: Build MythTV

on:
  push:

  pull_request:

permissions:
  contents: read

jobs:
  #
  # The containers are selected to be from the set of
  # linux distributions and versions that are currently
  # among the list (or will soon be for beta/rc) of the
  # MythTV project lists of supported variants (which
  # are Ubuntu LTS and current, Debian stable, and Fedora
  # current and current-1.  This provides good coverage
  # quickly.
  #
  build-mythtv-linux:
    name: Building MythTV on ${{ matrix.container.desc }} with ${{ matrix.compiler.desc }} 

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC
      MYTHTV_CONFIG_PREFIX: ${{ github.workspace }}/build/install
      MYTHTV_CONFIG_EXTRA:

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)',       ansibleopts: '--limit localhost' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)',   ansibleopts: '--limit localhost' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 (Kinetic Kudu)',          ansibleopts: '--limit localhost' }

          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)',                 ansibleopts: '--limit localhost' }
          - { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)',                 ansibleopts: '--limit localhost' }

          - { image: 'fedora:35',                      desc: 'Fedora 35',                            ansibleopts: '--limit localhost' }
          - { image: 'fedora:36',                      desc: 'Fedora 36',                            ansibleopts: '--limit localhost' }
          - { image: 'fedora:37',                      desc: 'Fedora 37',                            ansibleopts: '--limit localhost' }

        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc',                                  compileropts: '--cc=gcc --cxx=g++' }
          - { cc: 'clang', cxx: 'clang++',             desc: 'clang',                                compileropts: '--cc=clang --cxx=clang++' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible and compilers
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ansible apt-utils gcc g++ clang -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux (for ansible)
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS install ansible and compilers
        run: dnf install ansible dnf-plugins-core gcc gcc-c++ clang -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: MythTV/ansible
          ref: master
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook ${{ matrix.container.ansibleopts }} mythtv.yml

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv
          ref: master
          path: mythtv

      - name: set ccache directory
        run: echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Checkout ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ matrix.container.image }}-${{ matrix.compiler.cc }}-ccache-${{ github.sha }}
          restore-keys: ${{ matrix.container.image }}-${{ matrix.compiler.cc }}-ccache

      - name: ccache statistics [pre]
        run: ccache -sV

      - name: ccache limit total size
        # Needed because github limits the total size of all
        # caches to 10G, and with all of the distro variants
        # we are building on, we can exceed that easily
        run: ccache -M 1G

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }} ${{ env.MYTHTV_CONFIG_EXTRA }} ${{ matrix.compiler.compileropts }} ${{ matrix.branch.branchopts }}

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ env.MYTHTV_CONFIG_PREFIX }}

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install

