---
name: Build MythTV core variants using cmake

#
# This workflow is intended to provide good coverage
# quickly to insure that the build "basically" works.
#
# The containers are selected to be a subset from the
# set of linux distributions and versions that are
# currently among the list (or will soon be for beta/rc)
# of the MythTV project lists of supported variants
# (which are Ubuntu LTS and current, Debian stable, and
# Fedora current and current-1.
#

on:                # yamllint disable-line rule:truthy

  push:
    branches:
      - 'master'

  pull_request:
    branches:
      - 'master'

  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-mythtv-linux:
    name: Building MythTV on ${{ matrix.container.desc }}

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC
      CCACHE_DIR: $HOME/.ccache
      CCACHE_COMPRESS: true
      CCACHE_MAXSIZE: 250M
      DEBIAN_FRONTEND: noninteractive

    strategy:
      matrix:
        container:
          # Ubuntu group
          - desc: 'Ubuntu interim'
            image: 'ubuntu:rolling'
            update_cmd: 'apt update -y && apt upgrade -y'
            install_ansible_cmd: 'apt install ansible apt-utils -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'apt install ant default-jdk-headless -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'
          - desc: 'Ubuntu LTS'
            image: 'ubuntu:latest'
            update_cmd: 'apt update -y && apt upgrade -y'
            install_ansible_cmd: 'apt install ansible apt-utils -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'apt install ant default-jdk-headless -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'

          # Debian group
          - desc: 'Debian stable'
            image: 'debian:stable'
            update_cmd: 'apt update -y && apt upgrade -y'
            install_ansible_cmd: 'apt install ansible apt-utils -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'apt install ant default-jdk-headless -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'

          # Fedora group
          - desc: 'Fedora'
            image: 'quay.io/fedora/fedora:latest'
            update_cmd: 'dnf upgrade -y'
            install_ansible_cmd: 'dnf install ansible dnf-plugins-core -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'dnf install ant -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'

          # Qt6, clang, and cmake alternative(s) group
          - desc: 'Fedora - Qt6'
            image: 'quay.io/fedora/fedora:latest'
            update_cmd: 'dnf upgrade -y'
            install_ansible_cmd: 'dnf install ansible dnf-plugins-core -y'
            ansible_cmd: 'ansible-playbook --limit localhost -e "qt6=true" mythtv.yml'
            install_extra_pkgs_cmd: 'dnf install ant -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --qmake=qmake6 --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'
          - desc: 'Fedora - clang'
            image: 'quay.io/fedora/fedora:latest'
            update_cmd: 'dnf upgrade -y'
            install_ansible_cmd: 'dnf install ansible dnf-plugins-core -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'dnf install ant clang -y'
            core_working_subdirectory: 'mythtv'
            core_configure_cmd: './configure --cc=clang --cxx=clang++ --compile-type=release --enable-debug=0 --disable-debug --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --prefix=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'make -j4 all_no_test'
            core_install_cmd: 'make -j4 install'
            core_test_cmd: 'make -j4 tests'
            plugins_working_subdirectory: 'mythplugins'
            plugins_configure_cmd: './configure --prefix=$GITHUB_WORKSPACE/build/install'
            plugins_build_cmd: 'make -j4'
            plugins_install_cmd: 'make -j4'
          - desc: 'Fedora - CMake'
            image: 'quay.io/fedora/fedora:latest'
            update_cmd: 'dnf upgrade -y'
            install_ansible_cmd: 'dnf install ansible dnf-plugins-core -y'
            ansible_cmd: 'ansible-playbook --limit localhost mythtv.yml'
            install_extra_pkgs_cmd: 'dnf install ant nv-codec-headers -y'
            core_working_subdirectory: ''
            core_configure_cmd: 'cmake --preset qt5 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/build/install'
            core_build_cmd: 'cmake --build build-qt5'
            core_install_cmd: ''
            core_test_cmd: ''
            plugins_working_subdirectory: ''
            plugins_configure_cmd: ''
            plugins_build_cmd: ''
            plugins_install_cmd: ''

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Checkout ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ matrix.container.desc }}-build-core-ccache-${{ github.sha }}
          restore-keys: ${{ matrix.container.desc }}-build-core-ccache

      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: OS update
        run: ${{ matrix.container.update_cmd }}
        if: ${{ matrix.container.update_cmd != '' }}

      - name: OS install ansible
        run: ${{ matrix.container.install_ansible_cmd }}
        if: ${{ matrix.container.install_ansible_cmd != '' }}

      - name: Checkout MythTV/ansible repository
        uses: actions/checkout@v4
        with:
          repository: MythTV/ansible
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ${{ matrix.container.ansible_cmd }}
        if: ${{ matrix.container.ansible_cmd != '' }}

      - name: Install extra packages for additional coverage
        run: ${{ matrix.container.install_extra_pkgs_cmd }}
        if: ${{ matrix.container.install_extra_pkgs_cmd != '' }}

      ####
      #### This would be a local checkout if/when this moves to the MythTV repo
      ####
      - name: Checkout Mythtv/mythtv repository
        uses: actions/checkout@v4
        with:
          repository: garybuhrmaster/mythtv
          ref: FFNVCODEC
          path: mythtv

      - name: ccache statistics [pre]
        run: ccache -s

      - name: Configure
        working-directory: mythtv/${{ matrix.container.core_working_subdirectory }}
        run: ${{ matrix.container.core_configure_cmd }}
        if: ${{ matrix.container.core_configure_cmd != '' }}

      - name: Build
        working-directory: mythtv/${{ matrix.container.core_working_subdirectory }}
        run: ${{ matrix.container.core_build_cmd }}
        if: ${{ matrix.container.core_build_cmd != '' }}

      - name: Install
        working-directory: mythtv/${{ matrix.container.core_working_subdirectory }}
        run: ${{ matrix.container.core_install_cmd }}
        if: ${{ matrix.container.core_install_cmd != '' }}

      - name: Test
        working-directory: mythtv/${{ matrix.container.core_working_subdirectory }}
        run: ${{ matrix.container.core_test_cmd }}
        if: ${{ matrix.container.core_test_cmd != '' }}

      - name: Configure Plugins
        working-directory: mythtv/${{ matrix.container.plugins_working_subdirectory }}
        run: ${{ matrix.container.plugins_configure_cmd }}
        if: ${{ matrix.container.plugins_configure_cmd != '' }}

      - name: Build Plugins
        working-directory: mythtv/${{ matrix.container.plugins_working_subdirectory }}
        run: ${{ matrix.container.plugins_build_cmd }}
        if: ${{ matrix.container.plugins_build_cmd != '' }}

      - name: Install Plugins
        working-directory: mythtv/${{ matrix.container.plugins_working_subdirectory }}
        run: ${{ matrix.container.plugins_install_cmd }}
        if: ${{ matrix.container.plugins_install_cmd != '' }}

      - name: ccache statistics [post]
        run: ccache -s
