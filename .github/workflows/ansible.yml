---
name: Run ansible-playbook

  #
  # This simply tests that ansible can successfully run
  # on Linux (macOS ansible with macports is extremely
  # slow to install and run, so we defer it to the full
  # build workflow).
  #

on:
  push:

  pull_request:

permissions:
  contents: read

jobs:
  ansible-linux:
    name: Running ansible-playbook on ${{ matrix.container.desc }} 

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)',       opts: '--limit localhost' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)',   opts: '--limit localhost' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 (Kinetic Kudu)',          opts: '--limit localhost' }

          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)',                 opts: '--limit localhost' }
          - { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)',                 opts: '--limit localhost' }

          - { image: 'fedora:35',                      desc: 'Fedora 35',                            opts: '--limit localhost' }
          - { image: 'fedora:36',                      desc: 'Fedora 36',                            opts: '--limit localhost' }
          - { image: 'fedora:37',                      desc: 'Fedora 37',                            opts: '--limit localhost' }
          - { image: 'fedora:rawhide',                 desc: 'Fedora Rawhide',                       opts: '--limit localhost' }

          - { image: 'amazonlinux:2',                  desc: 'Amazon Linux 2',                       opts: '--limit f30' }
          - { image: 'amazonlinux:2022',               desc: 'Amazon Linux 2022',                    opts: '--limit localhost' }

          - { image: 'quay.io/centos/centos:stream8',  desc: 'CentOS 8 Stream',                      opts: '--limit localhost' }
          - { image: 'quay.io/centos/centos:stream9',  desc: 'CentOS 9 Stream',                      opts: '--limit localhost' }
          
          - { image: 'rockylinux:8',                   desc: 'Rocky 8',                              opts: '--limit localhost' }
          - { image: 'rockylinux:9',                   desc: 'Rocky 9',                              opts: '--limit localhost' }

          - { image: 'opensuse/tumbleweed:latest',     desc: 'OpenSUSE Tumbleweed',                  opts: '--limit localhost' }
          - { image: 'opensuse/leap:latest',           desc: 'OpenSUSE Leap',                        opts: '--limit localhost' }

          - { image: 'archlinux:latest',               desc: 'ArchLinux',                            opts: '--limit localhost' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ansible apt-utils -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux (for ansible)
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS install ansible
        run: dnf install ansible dnf-plugins-core -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: OpenSUSE OS update
        run: zypper update -y
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: OpenSUSE OS install ansible
        run: zypper install -y ansible tar gzip
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: ArchLinux OS update
        run: pacman --noconfirm -Syu
        if: env.OS_RELEASE_ID == 'arch'

      - name: ArchLinux OS install ansible
        run: pacman --noconfirm -Sy ansible
        if: env.OS_RELEASE_ID == 'arch'

      - name: AmazonLinux 2 OS update
        run: yum upgrade -y
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR == '2'

      - name: AmazonLinux 2 install amazon-linux-extras
        run: yum install amazon-linux-extras -y
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR == '2'

      - name: AmazonLinux 2 enable amazon-linux-extras ansible
        run: amazon-linux-extras enable ansible2
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR == '2'

      - name: AmazonLinux 2 install ansible
        run: yum install ansible tar gzip -y
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR == '2'

      - name: AmazonLinux 2022+ OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR >= '2022'

      - name: AmazonLinux 2022+ install ansible
        run: dnf install ansible tar gzip -y
        if: env.OS_RELEASE_ID == 'amzn' && env.OS_RELEASE_VERSION_MAJOR >= '2022'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook ${{ matrix.container.opts }} mythtv.yml

