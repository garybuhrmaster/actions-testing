---
name: Run ansible-playbook

  #
  # This simply tests that ansible can successfully run
  # on Linux (macOS ansible is extremely slow to install
  # and run, so we defer it to the full build workflow).
  #

on:
  push:

  pull_request:

permissions:
  contents: read

jobs:
  linux:
    name: Running ansible-playbook on ${{ matrix.container.desc }} 

    runs-on: ubuntu-latest

    env:
      TZ: Etc/UTC

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 (Kinetic Kudu)' }

          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)' }
          - { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)' }

          - { image: 'fedora:35',                      desc: 'Fedora 35' }
          - { image: 'fedora:36',                      desc: 'Fedora 36' }
          - { image: 'fedora:37',                      desc: 'Fedora 37' }
          - { image: 'fedora:rawhide',                 desc: 'Fedora Rawhide' }

          - { image: 'quay.io/centos/centos:stream8',  desc: 'CentOS 8 Stream' }
          - { image: 'quay.io/centos/centos:stream9',  desc: 'CentOS 9 Stream' }
          
          - { image: 'rockylinux:8',                   desc: 'Rocky 8' }
          - { image: 'rockylinux:9',                   desc: 'Rocky 9' }

          - { image: 'opensuse/tumbleweed:latest',     desc: 'OpenSUSE Tumbleweed' }
          - { image: 'opensuse/leap:latest',           desc: 'OpenSUSE Leap' }

          - { image: 'archlinux:latest',               desc: 'ArchLinux' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        env:
          DEBIAN_FRONTEND: noninteractive
        run: apt install ansible apt-utils -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux (for ansible)
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: Redhat/Fedora OS install ansible
        run: dnf install ansible dnf-plugins-core -y
        if: env.OS_RELEASE_ID == 'fedora' || env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'rocky'

      - name: OpenSUSE OS update
        run: zypper update -y
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: OpenSUSE OS install ansible
        run: zypper install -y ansible tar gzip
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: ArchLinux OS update
        run: pacman --noconfirm -Syu
        if: env.OS_RELEASE_ID == 'arch'

      - name: ArchLinux OS install ansible
        run: pacman --noconfirm -Sy ansible
        if: env.OS_RELEASE_ID == 'arch'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: garybuhrmaster/ansible
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook -i hosts qt5.yml

  macOS:
    name: Running ansible-playbook on ${{ matrix.macos.desc }} using ${{ matrix.pkg-mgr.desc }}

    env:
      MACPORTS_VERSION: 2.7.2
      TZ: Etc/UTC

    strategy:
      matrix:
        macOS:
          - { os: 'macos-11',                          desc: 'macOS 11 (Big Sur)',     portspkg: '11-BigSur'}
          - { os: 'macos-12',                          desc: 'macOS 12 (Monterey)',    portspkg: '12-Monterey' }

        pkg-mgr:
          # { mgr: 'macports',                         desc: 'macports' }
          ## Homebrew ansible tasks are still a work in progress
          - { mgr: 'homebrew',                         desc: 'homebrew' }

      fail-fast: false

    runs-on: ${{ matrix.macOS.os }}

    steps:
      - name: Uninstall homebrew if using macports (package conflicts)
        run: /bin/bash -c "$(NONINTERACTIVE=1 curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install macports if using macports
        run: |
          curl --location https://github.com/macports/macports-base/releases/download/v${{ env.MACPORTS_VERSION }}/MacPorts-${{ env.MACPORTS_VERSION }}-${{ matrix.macOS.portspkg }}.pkg --output MacPorts.pkg
          sudo installer -pkg ./MacPorts.pkg -target /
          echo "PATH=/opt/local/bin:/opt/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Adjust path for homebrew
        run: echo "PATH=/usr/local/bin:/usr/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Install ansible for macports
        run: |
          sudo port install py310-ansible
          sudo port select --set ansible py310-ansible
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install ansible for homebrew
        run: brew install ansible
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: garybuhrmaster/ansible
          path: ansible
          ref: homebrew

      - name: Run ansible to install build requirements for macports
        working-directory: ansible
        run: sudo ansible-playbook -i hosts qt5.yml --extra-vars "install_qtwebkit=true"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Run ansible to install build requirements for homebrew
        working-directory: ansible
        run: ansible-playbook -i hosts qt5.yml
        if: matrix.pkg-mgr.mgr == 'homebrew'

