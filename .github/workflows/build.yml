---
name: build

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    name: Build on ${{ matrix.name }} using ${{ matrix.cc }}

    runs-on: ubuntu-latest

    env:
      RPM_PKG_MGR: dnf
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC

    strategy:
      matrix:
        container: [""]
        name: [""]
        cc: ['gcc'. 'clang']
        include:
          - container: ubuntu:18.04
            name: Ubuntu 18.04 LTS (Bionic Beaver)
          - container: ubuntu:20.04
            name: Ubuntu 20.04 LTS (Focal Fossa)
          - container: ubuntu:22.04
            name: Ubuntu 22.04 LTS (Jammy Jellyfish)
          - container: ubuntu:22.10
            name: Ubuntu 22.10 (Kinetic Kudu)
          - container: debian:bullseye
            name: Debian 11 (Bullseye)
          - container: debian:bookworm
            name: Debian 12 (Bookworm)
          - container: fedora:35
            name: Fedora 35
          - container: fedora:36
            name: Fedora 36
          - container: fedora:rawhide
            name: Fedora Rawhide
          - container: archlinux:base
            name: ArchLinux
          - container: quay.io/centos/centos:stream8
            name: CentOS Stream 8
          - container: opensuse/tumbleweed
            name: OpenSUSE tumbleweed
          - container: opensuse/leap
            name: OpenSUSE leap
          - cc: 'gcc'
            cxx: 'g++'
          - cc: 'clang'
            cxx: 'clang++'
      fail-fast: false

    continue-on-error: true

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release && echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          . /etc/os-release && echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          . /etc/os-release && echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV

      - name: Adjust package manager for EL 7
        run: echo "RPM_PKG_MGR=yum" >> $GITHUB_ENV
        if: |
          env.OS_RELEASE_ID == 'centos' && env.OS_RELEASE_VERSION == '7'

      - name: Add powertools repo for EL 8
        run: ${{env.RPM_PKG_MGR}} config-manager --set-enabled powertools
        if: |
          env.OS_RELEASE_ID == 'centos' && env.OS_RELEASE_VERSION == '8'

      - name: Add EPEL repo for EL linux
        run: ${{env.RPM_PKG_MGR}} -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: |
          env.OS_RELEASE_ID == 'centos'

      - name: Update Debian OS and install ansible
        run: |
          apt-get update -q -y
          apt-get upgrade -q -y
          apt-get install ansible ${{ matrix.cc }} -y
        if: |
          env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Update Redhat OS and install ansible
        run: |
          ${{env.RPM_PKG_MGR}} upgrade -y
          ${{env.RPM_PKG_MGR}} install -y ansible ${{ matrix.cc }}
        if: |
          env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: Update OpenSUSE OS and install ansible
        run: |
          zypper update -y
          zypper install -y ansible tar gzip ${{ matrix.cc }}
        if: |
          env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: Update ArchLinux and install ansible
        run: |
          pacman --noconfirm -Syu
          pacman --noconfirm -Sy ansible ${{ matrix.cc }}
        if: |
          env.OS_RELEASE_ID == 'arch'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: MythTV/ansible
          path: ansible

      - name: Run ansible to install build requirements
        run: |
          ansible-playbook -i ansible/hosts ansible/qt5.yml

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv

