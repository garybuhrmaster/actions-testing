---
name: build

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    name: Build on ${{ matrix.container.desc }} with ${{ matrix.compiler.desc }} 

    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 (Kinetic Kudu)' }

          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)' }
          - { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)' }

          - { image: 'fedora:35',                      desc: 'Fedora 35' }
          - { image: 'fedora:36',                      desc: 'Fedora 36' }
          - { image: 'fedora:37',                      desc: 'Fedora 37' }
          - { image: 'fedora:rawhide',                 desc: 'Fedora Rawhide' }

          ## The following are disabled due to ansible not (yet) being correct
          ## and the entire stream and qt5webkit issue is still open
          # { image: 'quay.io/centos/centos:stream8',  desc: 'CentOS 8 Stream' }
          # { image: 'quay.io/centos/centos:stream9',  desc: 'CentOS 9 Stream' }

          ## The following are disabled due to ansible not (yet) being correct
          # { image: 'opensuse/tumbleweed:latest',     desc: 'OpenSUSE Tumbleweed' }
          # { image: 'opensuse/leap:latest',           desc: 'OpenSUSE Leap' }

          - { image: 'archlinux:latest',               desc: 'ArchLinux' }

        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc' }
          - { cc: 'clang', cxx: 'clang++',             desc: 'clang' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release
          echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV
          echo "OS_RELEASE_VERSION_CODENAME=$VERSION_CODENAME" >> $GITHUB_ENV

      - name: Debian OS obtain codename for prerelease vesions
        run: echo "OS_RELEASE_VERSION_CODENAME=`dpkg --status tzdata | grep 'Provides' | cut -f2 -d'-'`" >> $GITHUB_ENV
        if: env.OS_RELEASE_ID == 'debian' && env.OS_RELEASE_VERSION_CODENAME == ''

      - name: Debian/Ubuntu OS update
        run: |
          apt update -y
          apt upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        run: apt install ansible -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat OS - add EPEL repo for EL linux
        run: dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${{env.OS_RELEASE_VERSION_MAJOR}}.noarch.rpm
        if: env.OS_RELEASE_ID == 'centos'

      - name: Redhat/Fedora OS update
        run: dnf upgrade -y
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: Redhat/Fedora OS install ansible
        run: dnf install ansible -y
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: OpenSUSE OS update
        run: zypper update -y
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: OpenSUSE OS install ansible
        run: zypper install -y ansible tar gzip
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: ArchLinux OS update
        run: pacman --noconfirm -Syu
        if: env.OS_RELEASE_ID == 'arch'

      - name: ArchLinux OS install ansible
        run: pacman --noconfirm -Sy ansible
        if: env.OS_RELEASE_ID == 'arch'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: garybuhrmaster/ansible
          ref: archlinux
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: ansible-playbook -i hosts qt5.yml

      - name: Debian/Ubuntu OS install extra packages (for greater coverage)
        run: apt install ant default-jdk qtbase5-private-dev libvulkan-dev ${{ matrix.compiler.cc }} -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install extra packages (for greater coverage)
        run: apt install libdav1d-dev -y
        if: env.OS_RELEASE_ID == 'debian' || (env.OS_RELEASE_ID == 'ubuntu' && env.OS_RELEASE_VERSION_MAJOR > 20)

      - name: Redhat/Fedora OS install extra packages (for greater coverage)
        run: dnf install ant python-setuptools qt5-qtbase-private-devel vulkan-headers ${{ matrix.compiler.cc }} -y
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: ArchLinux OS install extra packages (for greater coverage)
        run: pacman --noconfirm -Sy ant python-setuptools jdk-openjdk vulkan-headers ${{ matrix.compiler.cc }}
        if: env.OS_RELEASE_ID == 'arch'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv
          path: mythtv

      - name: Checkout ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ matrix.container.image }}-${{ matrix.compiler.cc }}-ccache-${{ github.sha }}
          restore-keys: ${{ matrix.container.image }}-${{ matrix.compiler.cc }}-ccache

      - name: ccache statistics [pre]
        run: ccache -sV

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ github.workspace }}/build/install --cc=${{ matrix.compiler.cc }} --cxx=${{ matrix.compiler.cxx }} --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-libxvid --enable-bdjava --enable-vulkan

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Unit test core
        working-directory: mythtv/mythtv
        run: make test -j4

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ github.workspace }}/build/install

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: Install plugins
        working-directory: mythtv/mythplugins
        run: make install

      - name: ccache statistics [post]
        run: |
          ccache -sV


  macOS-build:
    name: Build on ${{ matrix.macOS.desc }} using ${{ matrix.pkg-mgr.desc }} with ${{ matrix.compiler.desc }}

    env:
      MACPORTS_VERSION: 2.7.2

    strategy:
      matrix:
        macOS:
          - { os: 'macos-11',                          desc: 'macOS 11 (Big Sur)',     portspkg: '11-BigSur'}
          - { os: 'macos-12',                          desc: 'macOS 12 (Monterey)',    portspkg: '12-Monterey' }
        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc' }
          # { cc: 'clang', cxx: 'clang++',             desc: 'clang' }
        pkg-mgr:
          - { mgr: 'macports',                         desc: 'macports' }
          - { mgr: 'homebrew',                         desc: 'homebrew' }

      fail-fast: false

    runs-on: ${{ matrix.macOS.os }}

    steps:
      - name: Uninstall homebrew if using macports (package conflicts)
        run: /bin/bash -c "$(NONINTERACTIVE=1 curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install macports if using macports
        run: |
          curl --location https://github.com/macports/macports-base/releases/download/v${{ env.MACPORTS_VERSION }}/MacPorts-${{ env.MACPORTS_VERSION }}-${{ matrix.macOS.portspkg }}.pkg --output MacPorts.pkg
          sudo installer -pkg ./MacPorts.pkg -target /
          echo "PATH=/opt/local/bin:/opt/local/sbin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install ansible for macports
        run: |
          sudo port install py310-ansible
          sudo port select --set ansible py310-ansible
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install ansible for homebrew
        run: brew install ansible
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: MythTV/ansible
          path: ansible

      - name: Run ansible
        working-directory: ansible
        run: |
          ansible --version

      - name: Run ansible to install build requirements
        working-directory: ansible
        run: sudo ansible-playbook --verbose -i hosts qt5.yml --extra-vars "install_qtwebkit=true"
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Add qt5 qmake path to for macports
        run: echo "PATH=/opt/local/libexec/qt5/bin:$PATH" >> $GITHUB_ENV
        if: matrix.pkg-mgr.mgr == 'macports'

      - name: Install core dependencies (macOS) if using homebrew
        run: |
          brew install pkg-config ccache qt5 nasm libsamplerate taglib lzo libcec libbluray fftw libass libhdhomerun dav1d x264 x265 libvpx openssl sound-touch
          brew link qt5 --force
        if: matrix.pkg-mgr.mgr == 'homebrew'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv
          path: mythtv

      - name: Checkout ccache
        uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: ${{ matrix.macOS.os }}-${{ matrix.pkg-mgr.mgr }}-${{ matrix.compiler.cc }}-ccache-${{ github.sha }}
          restore-keys: ${{ matrix.macOS.os }}-${{ matrix.pkg-mgr.mgr }}-${{ matrix.compiler.cc }}-ccache

      - name: ccache statistics [pre]
        run: ccache -sV

      - name: Configure core
        working-directory: mythtv/mythtv
        run: ./configure --prefix=${{ github.workspace }}/build/install --cc=${{ matrix.compiler.cc }} --cxx=${{ matrix.compiler.cxx }} --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan --extra-cxxflags='-I/usr/local/include -I/opt/local/include' --extra-ldflags='-L/usr/local/lib -L/opt/local/lib'

      - name: Make core
        working-directory: mythtv/mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: mythtv/mythtv
        run: make install

      - name: Configure plugins
        working-directory: mythtv/mythplugins
        run: ./configure --prefix=${{ github.workspace }}/build/install

      - name: Make plugins
        working-directory: mythtv/mythplugins
        run: make -j4

      - name: ccache statistics [post]
        run: |
          ccache -sV



