---
name: build

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    name: Build on ${{ matrix.container.desc }} using ${{ matrix.compiler.desc }} 

    runs-on: ubuntu-latest

    env:
      RPM_PKG_MGR: dnf
      DEBIAN_FRONTEND: noninteractive
      TZ: Etc/UTC

    strategy:
      matrix:
        container:
          - { image: 'ubuntu:20.04',                   desc: 'Ubuntu 20.04 LTS (Focal Fossa)' }
          - { image: 'ubuntu:22.04',                   desc: 'Ubuntu 22.04 LTS (Jammy Jellyfish)' }
          - { image: 'ubuntu:22.10',                   desc: 'Ubuntu 22.10 LTS (Kinetic Kudu)' }
          - { image: 'debian:bullseye',                desc: 'Debian 11 (Bullseye)' }

          ## The following is disabled due to ansible not (yet) being correct
          # { image: 'debian:bookworm',                desc: 'Debian 12 (Bookworm)' }

          - { image: 'fedora:35',                      desc: 'Fedora 35' }
          - { image: 'fedora:36',                      desc: 'Fedora 36' }
          - { image: 'fedora:rawhide',                 desc: 'Fedora Rawhide' }

          ## The following are disabled due to ansible not (yet) being correct
          # { image: 'opensuse/tumbleweed:latest',     desc: 'OpenSUSE Tumbleweed' }
          # { image: 'opensuse/leap:latest',           desc: 'OpenSUSE Leap' }
          # { image: 'archlinux:latest',               desc: 'ArchLinux' }

        compiler:
          - { cc: 'gcc',   cxx: 'g++',                 desc: 'gcc' }
          - { cc: 'clang', cxx: 'clang++',             desc: 'clang' }

      fail-fast: false

    container:
      image: ${{ matrix.container.image }}

    steps:
      - name: Detect OS release
        run: |
          . /etc/os-release && echo "OS_RELEASE_ID=$ID" >> $GITHUB_ENV
          . /etc/os-release && echo "OS_RELEASE_VERSION=$VERSION_ID" >> $GITHUB_ENV
          . /etc/os-release && echo "OS_RELEASE_VERSION_MAJOR=${VERSION_ID%%.*}" >> $GITHUB_ENV

      - name: Debian/Ubuntu OS update
        run: |
          apt-get update -y
          apt-get upgrade -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Debian/Ubuntu OS install ansible
        run: apt-get install ansible -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat/Fedora OS update
        run: ${{env.RPM_PKG_MGR}} upgrade -y
          ${{env.RPM_PKG_MGR}} install -y ansible ccache ant ${{ matrix.compiler.cc }} 
        if: |
          env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: Redhat/Fedora OS install ansible
        run: ${{env.RPM_PKG_MGR}} install ansible -y
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: OpenSUSE OS update and install ansible
        run: |
          zypper update -y
          zypper install -y ansible tar gzip ccache ant ${{ matrix.compiler.cc }}
        if: env.OS_RELEASE_ID == 'opensuse-leap' || env.OS_RELEASE_ID == 'opensuse-tumbleweed'

      - name: Update ArchLinux and install ansible
        run: |
          pacman --noconfirm -Syu
          pacman --noconfirm -Sy ansible ccache ant ${{ matrix.compiler.cc }}
        if: env.OS_RELEASE_ID == 'arch'

      - name: Checkout MythTV/ansible repo
        uses: actions/checkout@v3
        with:
          repository: MythTV/ansible
          path: ansible

      - name: Run ansible to install build requirements
        working-directory: ./ansible
        run: ansible-playbook -i hosts qt5.yml

      - name: Debian/Ubuntu OS install extra packages
        run: apt-get install ant libbluray-bdj java-compiler ${{ matrix.compiler.cc }} -y
        if: env.OS_RELEASE_ID == 'debian' || env.OS_RELEASE_ID == 'ubuntu'

      - name: Redhat/Fedora OS install extra packages
        run: ${{env.RPM_PKG_MGR}} install ant python-setuptools ${{ matrix.compiler.cc }} -y
        if: env.OS_RELEASE_ID == 'centos' || env.OS_RELEASE_ID == 'fedora'

      - name: Checkout Mythtv/mythtv
        uses: actions/checkout@v3
        with:
          repository: MythTV/mythtv

      - name: Setup build environment
        run: |
          echo "MYTHTV_CONFIG=--prefix=${{ github.workspace }}/build/install --cc=${{ matrix.compiler.cc }} --cxx=${{ matrix.compiler.cxx }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Check ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ matrix.image.os }}-${{ matrix.compiler.cc }}-ccache-${{ github.sha }}
          restore-keys: ${{ matrix.image.os }}-${{ matrix.compiler.cc }}-ccache

      - name: ccache statistics [pre]
        run: ccache -sV

      - name: Configure core
        working-directory: ./mythtv
        run: ./configure $MYTHTV_CONFIG --enable-libmp3lame --enable-libvpx --enable-libx264 --enable-libx265 --enable-bdjava --enable-vulkan

      - name: Make core
        working-directory: ./mythtv
        run: make all_no_test -j4

      - name: Install core
        working-directory: ./mythtv
        run: make install

      # QTest requires a QT SQL plugin - but there are currently none available via brew on macOS
      - name: Unit test core
        working-directory: ./mythtv
        run: make test
        if: runner.os == 'Linux'

      - name: Configure plugins
        working-directory: ./mythplugins
        run: ./configure $MYTHTV_CONFIG

      - name: Make plugins
        working-directory: ./mythplugins
        run: make -j4

      - name: ccache statistics [post]
        run: |
          ccache -sV

